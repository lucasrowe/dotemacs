;; .emacs (-*- emacs-lisp -*-)
;; See README for license and other information

;;; uncomment this line to disable loading of "default.el" at startup
;; (setq inhibit-default-init t)

;; just get to work - don't show the startup screen
;; (set-variable 'inhibit-startup-message t)
;; (setq inhibit-splash-screen t)

;; set up scroll parameters
;; (setq scroll-conseratively 1)
;; (setq scroll-step 1)

;; enable visual feedback on selections
(setq transient-mark-mode t)

;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" system-name))

;; stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)
  
;; set keybindings
;; yes, make emacs more like other text editors out there
(global-set-key [f2] 'execute-extended-command)
(global-set-key [f3] 'eshell)
(global-set-key [f4] 'find-grep)
(global-set-key [f5] 'compile)
(global-set-key [(meta l)] 'goto-line)
(global-set-key [(control x) (f)] 'find-file)
(global-set-key [(control x) (control k)] 'kill-buffer)
(global-set-key [(control z)] 'undo)
(global-set-key [(meta z)] 'undo)
(global-set-key [(meta s)] 'save-buffer)

(setq cursor-in-non-selected-windows nil)
 
;; modeline settings
(line-number-mode t)
(column-number-mode t)

;; backup files elsewhere
(defun make-backup-file-name (file)
  (concat "~/.emacs.d/backups/" (file-name-nondirectory file) "~"))

;;(Set-default-font "-*-liberation mono-*-r-*-*-*-100-*-*-*-*-*-*")

;;(set-scroll-bar-mode 'nil)

;; startup size and location
(if window-system
    (setq default-frame-alist 
          '((width . 200)
            (height . 120)
            (top . 0)
            (left . 0)
            (cursor-color . "cyan"))))

(menu-bar-mode -1)

;; why type out 'yes' or 'no' every time?
(fset 'yes-or-no-p 'y-or-n-p)

;; set-up load paths
(setq load-path (cons "~/.emacs.d/lisp/" load-path))

;; Info
(require 'info)

;; Dictionary
(setq ispell-personal-dictionary "~/.emacs.d/dictionary")

;; eshell
(setq eshell-directory-name "~/.emacs.d/eshell/")

;; Flymake uses pylint for .py files (syntax checking)
(when (load "flymake" t)
  (defun flymake-pylint-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                            'flymake-create-temp-inplace))
       (local-file (file-relative-name
                    temp-file
                    (file-name-directory buffer-file-name))))
       (list "epylint" (list local-file))))

    (add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" flymake-pylint-init)))

(add-hook 'find-file-hook 'flymake-find-file-hook)

; Get proper env... OS X Fix?
(defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (replace-regexp-in-string
          "[ \t\n]*$"
          ""
          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(when (and window-system (eq system-type 'darwin))
    ;; When started from Emacs.app or similar, ensure $PATH
    ;; is the same the user would see in Terminal.app
    (set-exec-path-from-shell-PATH))

;; dired
(require 'dired)

;; Syntax highlighting is all good
;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t)
  (setq font-lock-maximum-decoration t))
(setq font-lock-mode-maximum-decoration t)
(setq font-lock-message-threshold nil)
(setq font-lock-verbose nil)
(setq font-lock-auto-fontify t)
(setq font-lock-maximum-size nil)


;; turn on automagic (de)compression
(auto-compression-mode 1)

;; tabstop to 2, with spaces only
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

(setq auto-mode-alist
      (append
       '(
         ("\\.php" . php-mode)
         ("\\.css" . css-mode)
         ("\\.java$" . jde-mode)
         ("\\.js$" . javascript-mode)
         ("\\.json" . json-mode)
         ) auto-mode-alist))

;; not sure what this does - lr
(add-hook 'sgml-mode-hook
          (lambda ()
            (auto-fill-mode nil)))

;; json mode
(require 'json-mode)

;; org mode for .org files
(require 'org)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

;; misc settings
(temp-buffer-resize-mode 't)
(blink-cursor-mode -1)
(setq display-buffer-reuse-frames 't)
(setq default-indicate-empty-lines 't)
(auto-image-file-mode 1)
(setq-default truncate-lines t)

(add-hook 'message-mode-hook 'turn-on-auto-fill)
(setq text-mode-hook '(lambda nil (setq fill-column 72) (auto-fill-mode 1)))

;;(tool-bar-mode nil)

;; Abbreviations
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbrevs")
(read-abbrev-file "~/.emacs.d/abbrevs")
(setq save-abbrevs t)

(pending-delete-mode t)

;(desktop-save-mode 1)
(savehist-mode 1)

;;set up persistent.el 
;;to remember histories across emacs sessions
(setq persistent-session-list '(read-expression-history
             extended-command-history
             find-tag-history
             query-replace-history
             grep-history
             file-name-history
             compile-history
             kill-ring
             replace-string-history
             replace-regex-history
             query-replace-regex-history
             minibuffer-history
             shell-command-history
             buffer-name-history
             find-file-history
             ))
(require 'persistent)
(persistent-session-load-from-alist)
(setq persistent-session-size 500)

(require 'anything)

(server-start)

;;; Jump to matching parens
(defun goto-match-paren (arg)
  "Go to the matching parenthesis if on parenthesis"
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))))

(require 'gnus)
(setq gnus-inhibit-startup_message 1)

(global-set-key [(meta =)] 'goto-match-paren)

(require 'tail)

(require 'completion)
(dynamic-completion-mode)
;(global-set-key (kbd "M-<return>") 'complete)

(setq pcomplete-cycle-completions nil)

;; (prefer-coding-system 'utf-8)

;; NXHTML
(load "~/.emacs.d/lisp/nxhtml/autostart.el")
(setq nxhtml-skip-welcome t)

;; Blank Mode allows display of hidden chars
;; C-u 1 M-x blank-mode RET 
(require 'blank-mode) 

;; Color-theme preferences
(setq load-path (cons "~/.emacs.d/lisp/color-theme-6.6.0" load-path))
(setq load-path (cons "~/.emacs.d/lisp/color-theme-6.6.0/themes" load-path))
(require 'color-theme)
(color-theme-initialize)
(setq color-theme-is-global t)
(color-theme-tangotango)

;; Layout Preferences
(require 'layout-restore)
;; save layout key
(global-set-key [?\C-c ?l] 'layout-save-current)
;; load layout key
(global-set-key [?\C-c ?\C-l ?\C-l] 'layout-restore)
;; cancel(delete) layout key
(global-set-key [?\C-c ?\C-l ?\C-c] 'layout-delete-current)

(setq split-width-threshold nil)
(setq even-window-heights nil)

